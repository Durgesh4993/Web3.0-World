// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class itemBought extends ethereum.Event {
  get params(): itemBought__Params {
    return new itemBought__Params(this);
  }
}

export class itemBought__Params {
  _event: itemBought;

  constructor(event: itemBought) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class itemListed extends ethereum.Event {
  get params(): itemListed__Params {
    return new itemListed__Params(this);
  }
}

export class itemListed__Params {
  _event: itemListed;

  constructor(event: itemListed) {
    this._event = event;
  }

  get seller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get Price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class itemRemoved extends ethereum.Event {
  get params(): itemRemoved__Params {
    return new itemRemoved__Params(this);
  }
}

export class itemRemoved__Params {
  _event: itemRemoved;

  constructor(event: itemRemoved) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NFT_Marketplace__getListingsResultValue0Struct extends ethereum.Tuple {
  get price(): BigInt {
    return this[0].toBigInt();
  }

  get seller(): Address {
    return this[1].toAddress();
  }
}

export class NFT_Marketplace extends ethereum.SmartContract {
  static bind(address: Address): NFT_Marketplace {
    return new NFT_Marketplace("NFT_Marketplace", address);
  }

  getListings(
    nft_address: Address,
    token_id: BigInt
  ): NFT_Marketplace__getListingsResultValue0Struct {
    let result = super.call(
      "getListings",
      "getListings(address,uint256):((uint256,address))",
      [
        ethereum.Value.fromAddress(nft_address),
        ethereum.Value.fromUnsignedBigInt(token_id)
      ]
    );

    return changetype<NFT_Marketplace__getListingsResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getListings(
    nft_address: Address,
    token_id: BigInt
  ): ethereum.CallResult<NFT_Marketplace__getListingsResultValue0Struct> {
    let result = super.tryCall(
      "getListings",
      "getListings(address,uint256):((uint256,address))",
      [
        ethereum.Value.fromAddress(nft_address),
        ethereum.Value.fromUnsignedBigInt(token_id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<NFT_Marketplace__getListingsResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getProceeds(seller: Address): BigInt {
    let result = super.call("getProceeds", "getProceeds(address):(uint256)", [
      ethereum.Value.fromAddress(seller)
    ]);

    return result[0].toBigInt();
  }

  try_getProceeds(seller: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getProceeds",
      "getProceeds(address):(uint256)",
      [ethereum.Value.fromAddress(seller)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class BuyItemCall extends ethereum.Call {
  get inputs(): BuyItemCall__Inputs {
    return new BuyItemCall__Inputs(this);
  }

  get outputs(): BuyItemCall__Outputs {
    return new BuyItemCall__Outputs(this);
  }
}

export class BuyItemCall__Inputs {
  _call: BuyItemCall;

  constructor(call: BuyItemCall) {
    this._call = call;
  }

  get nft_address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token_id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyItemCall__Outputs {
  _call: BuyItemCall;

  constructor(call: BuyItemCall) {
    this._call = call;
  }
}

export class Cancel_listingCall extends ethereum.Call {
  get inputs(): Cancel_listingCall__Inputs {
    return new Cancel_listingCall__Inputs(this);
  }

  get outputs(): Cancel_listingCall__Outputs {
    return new Cancel_listingCall__Outputs(this);
  }
}

export class Cancel_listingCall__Inputs {
  _call: Cancel_listingCall;

  constructor(call: Cancel_listingCall) {
    this._call = call;
  }

  get nft_address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token_id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Cancel_listingCall__Outputs {
  _call: Cancel_listingCall;

  constructor(call: Cancel_listingCall) {
    this._call = call;
  }
}

export class List_itemCall extends ethereum.Call {
  get inputs(): List_itemCall__Inputs {
    return new List_itemCall__Inputs(this);
  }

  get outputs(): List_itemCall__Outputs {
    return new List_itemCall__Outputs(this);
  }
}

export class List_itemCall__Inputs {
  _call: List_itemCall;

  constructor(call: List_itemCall) {
    this._call = call;
  }

  get nft_address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token_id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class List_itemCall__Outputs {
  _call: List_itemCall;

  constructor(call: List_itemCall) {
    this._call = call;
  }
}

export class Update_listingCall extends ethereum.Call {
  get inputs(): Update_listingCall__Inputs {
    return new Update_listingCall__Inputs(this);
  }

  get outputs(): Update_listingCall__Outputs {
    return new Update_listingCall__Outputs(this);
  }
}

export class Update_listingCall__Inputs {
  _call: Update_listingCall;

  constructor(call: Update_listingCall) {
    this._call = call;
  }

  get nft_address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token_id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get new_price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class Update_listingCall__Outputs {
  _call: Update_listingCall;

  constructor(call: Update_listingCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
