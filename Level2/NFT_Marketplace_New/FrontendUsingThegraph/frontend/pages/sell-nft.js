import Head from "next/head"
import Image from "next/image"
import { Inter } from "@next/font/google"
import styles from "@/styles/Home.module.css"
import { Form, useNotification } from "web3uikit"
import { ethers } from "ethers"
import { useMoralis, useWeb3Contract } from "react-moralis"
import nftAbi from "../constants/BasicNft.json"
import marketPlaceAddress from "../constants/networkMapping.json"
import nftMarketplaceAbi from "../constants/NftMarketplace.json"
import { useState } from "react"

export default function SellNFT() {
    const { chainId } = useMoralis()
    const chainString = chainId ? parseInt(chainId).toString() : null
    const nftMarketplaceAddress = chainId ? marketPlaceAddress[chainString].NftMarketplace[0] : null
    const { account, isWeb3Enabled } = useMoralis
    const dispatch = useNotification()
    const { runContractFunction } = useWeb3Contract()
    async function approveAndList(data) {
        console.log("Approving...")
        const nftAddress = data.data[0].inputResult
        const tokenId = data.data[1].inputResult
        const price = ethers.utils.parseUnits(data.data[2].inputResult, "ether").toString()

        const approveOptions = {
            abi: nftAbi,
            contractAddress: nftAddress,
            functionName: "approve",
            params: {
                to: nftMarketplaceAddress,
                tokenId: tokenId,
            },
        }
        console.log(nftAddress, tokenId, price)

        await runContractFunction({
            params: approveOptions,
            onSuccess: () => handleApproveSuccess(nftAddress, tokenId, price),
            onError: (error) => console.log(error),
        })
    }

    async function handleApproveSuccess(nft_address, token_id, price) {
        console.log("Ok!, Now time to list")
        const listOptions = {
            abi: nftMarketplaceAbi,
            contractAddress: nftMarketplaceAddress,
            functionName: "list_item",
            params: {
                nft_address: nft_address,
                token_id: token_id,
                price: price,
            },
        }

        await runContractFunction({
            params: listOptions,
            onSuccess: () => handleListSuccess(),
            onError: (error) => console.log(error),
        })
    }

    function handleListSuccess() {
        dispatch({
            type: "success",
            title: "Item Listed",
            message: "Nft Listed, please refresh (and move blocks)",
            position: "topR",
        })
    }
    const isOwner = true || null
    const { proceeds, setProceeds } = useState("0")
    async function handleWithdraw() {
        const withdrawOptions = {
            abi: nftMarketplaceAbi,
            contractAddress: nftMarketplaceAddress,
            functionName: "withdraw",
            params: {},
        }
        await runContractFunction({
            params: withdrawOptions,
            onSuccess: () => setProceeds("0"),
            onError: (error) => console.log(error),
        })
    }

    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={styles.main}>
                <div className={styles.description}>
                    <Form
                        data={[
                            {
                                inputWidth: "60%",
                                name: "Nft Address",
                                type: "text",
                                value: "",
                                key: "nftAddress",
                            },
                            {
                                inputWidth: "60%",
                                name: "Token Id",
                                type: "number",
                                value: "",
                                key: "tokenId",
                            },
                            {
                                name: "price",
                                inputWidth: "60%",
                                type: "number",
                                value: "",
                                key: "price",
                            },
                        ]}
                        onSubmit={approveAndList}
                        title="Sell NFT!"
                        id="Main Form"
                    />
                    {isOwner ? (
                        <div className="withdraw m-6">
                            <button
                                onClick={handleWithdraw}
                                className="bg-green-300 font-serif cursor-pointer p-1 pr-2 rounded-sm border border-slate-600"
                            >
                                Withdraw
                            </button>
                            <h3 className="my-4">Total Amount : {proceeds}</h3>
                        </div>
                    ) : (
                        console.log("Not owner")
                    )}
                </div>
            </main>
        </>
    )
}
